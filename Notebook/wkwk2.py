# -*- coding: utf-8 -*-
"""wkwk2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15hB2mkVqPn8bdAj-9xG0fY-oaD3QgYLM
"""

import streamlit as st
import pandas as pd
import matplotlib.pyplot as plt
from statsmodels.tsa.statespace.sarimax import SARIMAX
import numpy as np

# 🔹 Set konfigurasi halaman
st.set_page_config(page_title="Dashboard Forecasting", layout="wide")

# 🔹 Load dataset dengan caching
@st.cache_data
def load_data():
    url = "https://raw.githubusercontent.com/nahwan25/Data_Analysis/refs/heads/main/analisis2/datasetforecasting_cleaned%20(1).csv"
    df = pd.read_csv(url)

    if 'Tanggal' not in df.columns:
        st.error("Kolom 'Tanggal' tidak ditemukan dalam dataset!")
        return None

    # Konversi tanggal dan buat kolom tambahan
    df["Tanggal"] = pd.to_datetime(df["Tanggal"])
    df["Tahun"] = df["Tanggal"].dt.year
    df["Bulan"] = df["Tanggal"].dt.month

    # Transformasi log untuk keperluan SARIMA
    df["Pembukaan_log"] = df["Pembukaan"].apply(lambda x: np.log(x) if x > 0 else 0)

    return df

# Load data
df_forecast = load_data()

# **Dashboard Title**
st.title("📈 Dashboard Time Series Forecasting")

# **Sidebar untuk Filter Data**
st.sidebar.header("⚙️ Filter Data")

if df_forecast is not None:
    # Pilih Tahun
    all_years = sorted(df_forecast["Tahun"].unique().tolist())
    selected_year = st.sidebar.selectbox("Pilih Tahun", all_years, index=0)

    # Pilih Bulan
    all_months = list(range(1, 13))
    selected_month = st.sidebar.selectbox("Pilih Bulan", all_months, index=0)

    # Filter data berdasarkan Tahun dan Bulan
    df_filtered = df_forecast[
        (df_forecast["Tahun"] == selected_year) &
        (df_forecast["Bulan"] == selected_month)
    ]

    # **Tampilkan Tabel Data**
    st.subheader(f"📋 Data Filtered: {selected_year}-{selected_month:02d}")
    st.dataframe(df_filtered)

    # **🔹 Fit Model SARIMA**
    if not df_forecast.empty:
        # Definisi model SARIMA
        model = SARIMAX(df_forecast["Pembukaan_log"],
                        order=(1,2,1),          # ARIMA(1,2,1)
                        seasonal_order=(0,0,0,7), # (0,0,0,7)
                        enforce_stationarity=False,
                        enforce_invertibility=False)

        # Fitting model
        model_fit = model.fit()

        # **Prediksi in-sample**
        predictions = model_fit.get_prediction(start=0, end=len(df_forecast) - 1, dynamic=False)
        pred_mean = predictions.predicted_mean

        # **🔹 Plot Time Series dan Forecasting**
        st.subheader(f"📊 Time Series Plot - {selected_year}-{selected_month:02d}")

        fig, ax = plt.subplots(figsize=(15, 7))
        ax.plot(df_filtered["Tanggal"], df_filtered["Pembukaan_log"], label="Actual", marker="o")
        ax.plot(df_filtered["Tanggal"], pred_mean[:len(df_filtered)], label="Forecast", linestyle="dashed", color="red")

        ax.set_title(f"Actual vs Forecast - {selected_year}-{selected_month:02d}", fontsize=16)
        ax.set_xlabel("Tanggal", fontsize=12)
        ax.set_ylabel("Log Nilai Pembukaan", fontsize=12)
        ax.legend()
        ax.grid(True)

        st.pyplot(fig)

else:
    st.warning("⚠️ Data tidak berhasil dimuat! Periksa kembali URL dataset.")